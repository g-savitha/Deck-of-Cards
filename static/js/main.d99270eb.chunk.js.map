{"version":3,"sources":["Card.js","DisplayDeck.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","angle","Math","random","x","y","_transform","style","transform","this","className","src","image","alt","name","Component","DisplayDeck","state","deck","drawn","getCard","bind","axios","get","setState","data","deck_id","cardUrl","cardRes","success","Error","card","cards","st","id","code","value","suit","alert","map","c","key","role","aria-label","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yWAEqBA,G,wDACnB,WAAYC,GAAQ,IAAD,sBACjB,cAAMA,GACN,IAAIC,EAAwB,GAAhBC,KAAKC,SAAgB,GAC7BC,EAAoB,GAAhBF,KAAKC,SAAgB,GACzBE,EAAoB,GAAhBH,KAAKC,SAAgB,GAJZ,OAMjB,EAAKG,WAAL,oBAA+BF,EAA/B,eAAuCC,EAAvC,sBAAsDJ,EAAtD,QANiB,E,qDASjB,OACE,6BACE,yBACEM,MAAO,CAAEC,UAAWC,KAAKH,YACzBI,UAAU,OACVC,IAAKF,KAAKT,MAAMY,MAChBC,IAAKJ,KAAKT,MAAMc,Y,GAhBQC,cC2EnBC,G,wDApEb,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IACDiB,MAAQ,CACXC,KAAM,KACNC,MAAO,IAET,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBANE,E,gMASAC,IAAMC,IAAN,UAZA,sCAYA,kB,OAAbL,E,OACJT,KAAKe,SAAS,CAAEN,KAAMA,EAAKO,O,mQAGvBC,EAAUjB,KAAKQ,MAAMC,KAAKQ,Q,SAExBC,E,UAlBW,sC,YAkBkBD,E,mBACbJ,IAAMC,IAAII,G,WAA1BC,E,QACSH,KAAKI,Q,sBACV,IAAIC,MAAJ,kB,OAEJC,EAAOH,EAAQH,KAAKO,MAAM,GAC9BvB,KAAKe,UAAS,SAACS,GAAD,MAAS,CACrBd,MAAM,GAAD,mBACAc,EAAGd,OADH,CAEH,CACEe,GAAIH,EAAKI,KACTvB,MAAOmB,EAAKnB,MACZE,KAAK,IAAD,OAAMiB,EAAKK,MAAX,eAAuBL,EAAKM,a,kDAKtCC,MAAM,EAAD,I,+IAIP,IAAMN,EAAQvB,KAAKQ,MAAME,MAAMoB,KAAI,SAACC,GAAD,OACjC,kBAAC,EAAD,CAAMC,IAAKD,EAAEN,GAAItB,MAAO4B,EAAE5B,MAAOE,KAAM0B,EAAE1B,UAE3C,OACE,yBAAKJ,UAAU,QACb,wBAAIA,UAAU,cACZ,0BAAMgC,KAAK,MAAMC,aAAW,WAA5B,gBADF,cAKE,0BAAMD,KAAK,MAAMC,aAAW,WAA5B,iBAIF,wBAAIjC,UAAU,uBACZ,0BAAMgC,KAAK,MAAMC,aAAW,WAA5B,gBADF,gCAKE,0BAAMD,KAAK,MAAMC,aAAW,WAA5B,iBAIF,4BAAQjC,UAAU,WAAWkC,QAASnC,KAAKW,SAA3C,aAGA,yBAAKV,UAAU,kBAAkBsB,Q,GA/DfjB,cCMX8B,G,6KARX,OACE,yBAAKnC,UAAU,OACb,kBAAC,EAAD,W,GAJUK,cCQE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d99270eb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Card.css\";\r\nexport default class Card extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let angle = Math.random() * 90 - 45;\r\n    let x = Math.random() * 40 - 20;\r\n    let y = Math.random() * 40 - 20;\r\n\r\n    this._transform = `translate(${x}px, ${y}px) rotate(${angle}deg)`;\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <img\r\n          style={{ transform: this._transform }}\r\n          className=\"Card\"\r\n          src={this.props.image}\r\n          alt={this.props.name}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Card from \"./Card\";\r\n\r\nimport \"./DisplayDeck.css\";\r\n\r\nconst API_BASE_URL = \"https://deckofcardsapi.com/api/deck\";\r\n\r\nclass DisplayDeck extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      deck: null,\r\n      drawn: [],\r\n    };\r\n    this.getCard = this.getCard.bind(this);\r\n  }\r\n  async componentDidMount() {\r\n    let deck = await axios.get(`${API_BASE_URL}/new/shuffle/`);\r\n    this.setState({ deck: deck.data });\r\n  }\r\n  async getCard() {\r\n    let deck_id = this.state.deck.deck_id;\r\n    try {\r\n      let cardUrl = `${API_BASE_URL}/${deck_id}/draw/`;\r\n      let cardRes = await axios.get(cardUrl);\r\n      if (!cardRes.data.success) {\r\n        throw new Error(`No cards left!`);\r\n      }\r\n      let card = cardRes.data.cards[0];\r\n      this.setState((st) => ({\r\n        drawn: [\r\n          ...st.drawn,\r\n          {\r\n            id: card.code,\r\n            image: card.image,\r\n            name: ` ${card.value} of ${card.suit}`,\r\n          },\r\n        ],\r\n      }));\r\n    } catch (err) {\r\n      alert(err);\r\n    }\r\n  }\r\n  render() {\r\n    const cards = this.state.drawn.map((c) => (\r\n      <Card key={c.id} image={c.image} name={c.name} />\r\n    ));\r\n    return (\r\n      <div className=\"Deck\">\r\n        <h1 className=\"Deck-title\">\r\n          <span role=\"img\" aria-label=\"diamond\">\r\n            ðŸ’Ž\r\n          </span>\r\n          Card Dealer\r\n          <span role=\"img\" aria-label=\"diamond\">\r\n            ðŸ’Ž\r\n          </span>\r\n        </h1>\r\n        <h2 className=\"Deck-title subtitle\">\r\n          <span role=\"img\" aria-label=\"diamond\">\r\n            ðŸ’Ž\r\n          </span>\r\n          A little demo made with react\r\n          <span role=\"img\" aria-label=\"diamond\">\r\n            ðŸ’Ž\r\n          </span>\r\n        </h2>\r\n        <button className=\"Deck-btn\" onClick={this.getCard}>\r\n          Get Card!\r\n        </button>\r\n        <div className=\"Deck-card-area\">{cards}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DisplayDeck;\r\n","import React, { Component } from \"react\";\nimport DisplayDeck from \"./DisplayDeck\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <DisplayDeck />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}